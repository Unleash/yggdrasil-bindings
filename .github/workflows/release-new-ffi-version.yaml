name: Release FFI and Upload Binaries

on:
  push:
    tags:
      - yggdrasilffi-v*
  workflow_dispatch:
    inputs:
      tag:
        description: "New semver version (e.g. 0.2.0)"
        required: true
        type: string

jobs:
  create-tag-and-release:
    name: Create Tag and GitHub Release
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    outputs:
      full_tag: ${{ steps.tag.outputs.full_tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set full tag name
        id: tag
        run: |
          FULL_TAG="yggdrasilffi-v${{ inputs.tag }}"
          echo "full_tag=$FULL_TAG" >> "$GITHUB_OUTPUT"

      - name: Get latest matching tag
        id: latest_tag
        run: |
          LATEST_TAG=$(git tag --list 'yggdrasilffi-v*' --sort=-creatordate | grep -v "^${{ steps.tag.outputs.full_tag }}$" | head -n 1 || echo "")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Create annotated tag
        run: |
          git tag -a "${{ steps.tag.outputs.full_tag }}" -m "Release ${{ steps.tag.outputs.full_tag }}"
          git push origin "${{ steps.tag.outputs.full_tag }}"

      - name: Generate changelog with git-cliff
        id: changelog
        run: |
          cargo install git-cliff

          if [[ "${{ steps.latest_tag.outputs.latest_tag }}" != "" ]]; then
            CHANGELOG=$(git cliff --tag "${{ steps.tag.outputs.full_tag }}" --range "${{ steps.latest_tag.outputs.latest_tag }}..HEAD" --strip all)
          else
            CHANGELOG=$(git cliff --tag "${{ steps.tag.outputs.full_tag }}" --strip all)
          fi

          echo 'changelog<<EOF' >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.full_tag }}
          name: Release ${{ steps.tag.outputs.full_tag }}
          body: ${{ steps.changelog.outputs.changelog }}

  build-and-upload:
    name: Build + Upload Binaries
    needs: [create-tag-and-release]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            output: libyggdrasilffi.so
            name: libyggdrasilffi_x86_64.so
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            output: libyggdrasilffi.so
            name: libyggdrasilffi_arm64.so
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            output: libyggdrasilffi.so
            name: libyggdrasilffi_x86_64-musl.so
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            output: libyggdrasilffi.so
            name: libyggdrasilffi_arm64-musl.so
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            output: yggdrasilffi.dll
            name: yggdrasilffi_x86_64.dll
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            output: yggdrasilffi.dll
            name: yggdrasilffi_arm64.dll
          - os: windows-latest
            target: i686-pc-windows-msvc
            output: yggdrasilffi.dll
            name: yggdrasilffi_i686.dll
          - os: macos-13
            target: x86_64-apple-darwin
            output: libyggdrasilffi.dylib
            name: libyggdrasilffi_x86_64.dylib
          - os: macos-latest
            target: aarch64-apple-darwin
            output: libyggdrasilffi.dylib
            name: libyggdrasilffi_arm64.dylib

    steps:
      - uses: actions/checkout@v5
      - name: Install rust
        run: |
          rustup set auto-self-update disable
          rustup toolchain install stable --profile default
          rustup target add ${{ matrix.target }}
          rustup show

      - name: Rust cache
        uses: Swatinem/rust-cache@v2

      # Linux MUSL toolchain (native, not cross)
      - name: Install musl tools (Linux)
        if: startsWith(matrix.target, 'x86_64-unknown-linux-musl') || startsWith(matrix.target, 'aarch64-unknown-linux-musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools pkg-config build-essential

      - name: Build Rust Library (Cargo)
        run: cargo build -p yggdrasilffi --release --target ${{ matrix.target }};

      - name: Rename Output Binary
        run: |
          mv target/${{ matrix.target }}/release/${{ matrix.output }} target/${{ matrix.target }}/release/${{ matrix.name }}

      - name: Set Tag Name
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "tag=${{ needs.create-tag-and-release.outputs.full_tag }}" >> $GITHUB_ENV
          else
            echo "tag=${GITHUB_REF##*/}" >> $GITHUB_ENV
            echo "tag=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
          fi

      - name: Get Release Upload URL by Tag
        id: get_release
        uses: actions/github-script@v5
        with:
          script: |
            const tag = process.env.tag;
            console.log(`Looking for release with tag: ${tag}`);
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const release = releases.find(r => r.tag_name === tag);
            if (release) {
              core.setOutput("upload_url", release.upload_url);
            } else {
              throw new Error(`Release with tag ${tag} not found.`);
            }
          result-encoding: json

      - name: Upload Binary to Release
        if: ${{ steps.get_release.outputs.upload_url }}
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/${{ matrix.name }}
          asset_name: "${{ matrix.name }}"
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
