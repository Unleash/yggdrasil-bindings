// automatically generated by the FlatBuffers compiler, do not modify

package io.getunleash.messaging;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class StrategyDefinition extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_9_23(); }
  public static StrategyDefinition getRootAsStrategyDefinition(ByteBuffer _bb) { return getRootAsStrategyDefinition(_bb, new StrategyDefinition()); }
  public static StrategyDefinition getRootAsStrategyDefinition(ByteBuffer _bb, StrategyDefinition obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public StrategyDefinition __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public io.getunleash.messaging.StrategyParameter parameters(int j) { return parameters(new io.getunleash.messaging.StrategyParameter(), j); }
  public io.getunleash.messaging.StrategyParameter parameters(io.getunleash.messaging.StrategyParameter obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int parametersLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public io.getunleash.messaging.StrategyParameter.Vector parametersVector() { return parametersVector(new io.getunleash.messaging.StrategyParameter.Vector()); }
  public io.getunleash.messaging.StrategyParameter.Vector parametersVector(io.getunleash.messaging.StrategyParameter.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createStrategyDefinition(FlatBufferBuilder builder,
      int nameOffset,
      int parametersOffset) {
    builder.startTable(2);
    StrategyDefinition.addParameters(builder, parametersOffset);
    StrategyDefinition.addName(builder, nameOffset);
    return StrategyDefinition.endStrategyDefinition(builder);
  }

  public static void startStrategyDefinition(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addParameters(FlatBufferBuilder builder, int parametersOffset) { builder.addOffset(1, parametersOffset, 0); }
  public static int createParametersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startParametersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endStrategyDefinition(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public StrategyDefinition get(int j) { return get(new StrategyDefinition(), j); }
    public StrategyDefinition get(StrategyDefinition obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

