// automatically generated by the FlatBuffers compiler, do not modify

package io.getunleash.messaging;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class StrategyFeature extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static StrategyFeature getRootAsStrategyFeature(ByteBuffer _bb) { return getRootAsStrategyFeature(_bb, new StrategyFeature()); }
  public static StrategyFeature getRootAsStrategyFeature(ByteBuffer _bb, StrategyFeature obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public StrategyFeature __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String featureName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer featureNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer featureNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public io.getunleash.messaging.StrategyDefinition strategies(int j) { return strategies(new io.getunleash.messaging.StrategyDefinition(), j); }
  public io.getunleash.messaging.StrategyDefinition strategies(io.getunleash.messaging.StrategyDefinition obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int strategiesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public io.getunleash.messaging.StrategyDefinition.Vector strategiesVector() { return strategiesVector(new io.getunleash.messaging.StrategyDefinition.Vector()); }
  public io.getunleash.messaging.StrategyDefinition.Vector strategiesVector(io.getunleash.messaging.StrategyDefinition.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createStrategyFeature(FlatBufferBuilder builder,
      int featureNameOffset,
      int strategiesOffset) {
    builder.startTable(2);
    StrategyFeature.addStrategies(builder, strategiesOffset);
    StrategyFeature.addFeatureName(builder, featureNameOffset);
    return StrategyFeature.endStrategyFeature(builder);
  }

  public static void startStrategyFeature(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addFeatureName(FlatBufferBuilder builder, int featureNameOffset) { builder.addOffset(0, featureNameOffset, 0); }
  public static void addStrategies(FlatBufferBuilder builder, int strategiesOffset) { builder.addOffset(1, strategiesOffset, 0); }
  public static int createStrategiesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startStrategiesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endStrategyFeature(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public StrategyFeature get(int j) { return get(new StrategyFeature(), j); }
    public StrategyFeature get(StrategyFeature obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

